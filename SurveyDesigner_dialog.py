# -*- coding: utf-8 -*-
"""
/***************************************************************************
 SeismicSurveyDesignerDialog
                                 A QGIS plugin
 Seismic Survey Designer
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2023-01-07
        git sha              : $Format:%H$
        copyright            : (C) 2023 by David Boutelier
        email                : boutelier.david@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from qgis.PyQt import uic
from qgis.PyQt import QtWidgets

class SeismicSurveyDesignerDialog(QtWidgets.QDialog):
    def __init__(self):
        """Constructor."""
        super().__init__()
        self.initUI()
    
    def initUI(self):
        self.dialog = QtWidgets.QDialog(self)
        self.dialog.setWindowTitle('Seismic Survey Designer')
        self.dialog.resize(300, 350)

        self.dialog.outer_layout = QtWidgets.QVBoxLayout()

        self.dialog.pbar = QtWidgets.QProgressBar(self)

        self.dialog.btnBox = QtWidgets.QDialogButtonBox()
        self.dialog.btnBox.setStandardButtons(QtWidgets.QDialogButtonBox.Ok | QtWidgets.QDialogButtonBox.Cancel)
        self.dialog.btnBox.accepted.connect(self.accept)
        #self.buttonBox.rejected.connect(self.reject)       

        tabs = QtWidgets.QTabWidget()
        tabs.addTab(self.generalTabUI(), "General")
        tabs.addTab(self.sourcesTabUI(), "Sources")
        tabs.addTab(self.receiversTabUI(), "Receivers")
        tabs.addTab(self.foldmapTabUI(), "Foldmap")

        self.dialog.outer_layout.addWidget(tabs)
        self.dialog.outer_layout.addWidget(self.dialog.pbar)
        self.dialog.outer_layout.addWidget(self.dialog.btnBox)
        self.dialog.setLayout(self.dialog.outer_layout)
        self.dialog.show()

    def generalTabUI(self):
        """Create the General page UI."""
        generalTab = QtWidgets.QWidget()
        layout = QtWidgets.QFormLayout()
        self.dialog.epsg = QtWidgets.QLineEdit()
        layout.addRow('epsg: ', self.dialog.epsg)
        self.dialog.origin = QtWidgets.QLineEdit()
        layout.addRow('origin: ', self.dialog.origin)
        generalTab.setLayout(layout)
        return generalTab
    
    def sourcesTabUI(self):
        """Create the Sources page UI."""
        sourceTab = QtWidgets.QWidget()
        layout = QtWidgets.QFormLayout()

        self.dialog.source = QtWidgets.QCheckBox('place sources')
        layout.addRow(self.dialog.source)

        self.dialog.source_azimuth = QtWidgets.QLineEdit()
        layout.addRow('azimuth: ', self.dialog.source_azimuth)

        self.dialog.source_length = QtWidgets.QLineEdit()
        layout.addRow('length: ', self.dialog.source_length)

        self.dialog.source_width = QtWidgets.QLineEdit()
        layout.addRow('width: ', self.dialog.source_width)

        self.dialog.source_left = QtWidgets.QRadioButton('Left')
        self.dialog.source_right = QtWidgets.QRadioButton('Right')
        layout.addRow(self.dialog.source_left, self.dialog.source_right)

        self.dialog.source_line_spacing = QtWidgets.QLineEdit()
        layout.addRow('line spacing: ', self.dialog.source_line_spacing)

        self.dialog.source_point_spacing = QtWidgets.QLineEdit()
        layout.addRow('point spacing: ', self.dialog.source_point_spacing)

        sourceTab.setLayout(layout)
        return sourceTab

    def receiversTabUI(self):
        """Create the receivers page UI."""
        receiversTab = QtWidgets.QWidget()
        layout = QtWidgets.QFormLayout()
        
        self.dialog.receivers = QtWidgets.QCheckBox('place receivers')
        layout.addRow(self.dialog.receivers)

        self.dialog.receivers_azimuth = QtWidgets.QLineEdit()
        layout.addRow('azimuth: ', self.dialog.receivers_azimuth)

        self.dialog.receivers_length = QtWidgets.QLineEdit()
        layout.addRow('length: ', self.dialog.receivers_length)

        self.dialog.receivers_width = QtWidgets.QLineEdit()
        layout.addRow('width: ', self.dialog.receivers_width)

        self.dialog.receivers_left = QtWidgets.QRadioButton('Left')
        self.dialog.receivers_right = QtWidgets.QRadioButton('Right')
        layout.addRow(self.dialog.receivers_left, self.dialog.receivers_right)

        self.dialog.receivers_line_spacing = QtWidgets.QLineEdit()
        layout.addRow('line spacing: ', self.dialog.receivers_line_spacing)

        self.dialog.receivers_point_spacing = QtWidgets.QLineEdit()
        layout.addRow('point spacing: ', self.dialog.receivers_point_spacing)

        receiversTab.setLayout(layout)
        return receiversTab

    def foldmapTabUI(self):
        """Create the foldmap page UI."""
        foldmapTab = QtWidgets.QWidget()
        layout = QtWidgets.QFormLayout()
        self.dialog.foldmap = QtWidgets.QCheckBox('calculate fold')
        layout.addRow(self.dialog.foldmap)

        self.dialog.grid_azimuth = QtWidgets.QLineEdit()
        layout.addRow('grid azimuth: ', self.dialog.grid_azimuth)

        self.dialog.grid_length = QtWidgets.QLineEdit()
        layout.addRow('grid length: ', self.dialog.grid_length)

        self.dialog.grid_width = QtWidgets.QLineEdit()
        layout.addRow('grid width: ', self.dialog.grid_width)

        self.dialog.grid_bin_length = QtWidgets.QLineEdit()
        layout.addRow('bin length: ', self.dialog.grid_bin_length)

        self.dialog.grid_bin_width = QtWidgets.QLineEdit()
        layout.addRow('bin width: ', self.dialog.grid_bin_width)

        self.dialog.azimuth = QtWidgets.QCheckBox('calculate azimuth distribution')
        layout.addRow(self.dialog.azimuth)
        
        foldmapTab.setLayout(layout)
        return foldmapTab

    def accept(self):
        global epsg, origin_x, origin_y, source, source_length, source_width, source_right, source_line_spacing, source_point_spacing

        self.read_values()
        self.trim()

    def read_values(self):
        global epsg, origin_x, origin_y, source, source_length, source_width, source_right, source_line_spacing, source_point_spacing
        # read and check epsg number
        # TO DO: import the epsg from the project directly
        epsg = self.dialog.epsg.text()
        if epsg.isdigit():
            epsg = int(epsg)
        else:
            msg = QtWidgets.QMessageBox()
            msg.setIcon(QtWidgets.QMessageBox.Critical)
            msg.setText("Error")
            msg.setInformativeText('epsg is not a number')
            msg.setWindowTitle("Error")
            msg.exec_()
        # read origin
        origin = self.dialog.origin.text()
        origin = origin.split(',')

        # check if origin has two numbers+
        if len(origin) == 2:
            origin_x = origin[0]
            origin_y = origin[1]

            # check if origin x is a number
            if origin_x.replace('.','',1).isdigit():
                origin_x = float(origin_x)
            else:
                msg = QtWidgets.QMessageBox()
                msg.setIcon(QtWidgets.QMessageBox.Critical)
                msg.setText("Error")
                msg.setInformativeText('easting of origin is not a number')
                msg.setWindowTitle("Error")
                msg.exec_()
            
            # check if origin y is a number
            if origin_y.replace('.','',1).isdigit():
                origin_y = float(origin_x)
            else:
                msg = QtWidgets.QMessageBox()
                msg.setIcon(QtWidgets.QMessageBox.Critical)
                msg.setText("Error")
                msg.setInformativeText('northing of orgin is not a number')
                msg.setWindowTitle("Error")
                msg.exec_()
        else:
            msg = QtWidgets.QMessageBox()
            msg.setIcon(QtWidgets.QMessageBox.Critical)
            msg.setText("Error")
            msg.setInformativeText('format of origin is incorrect')
            msg.setWindowTitle("Error")
            msg.exec_()
        
        # read if calculate sources
        source = self.dialog.source.isChecked()

        # read and check the azimuth of the source lines
        source_azimuth = self.dialog.source_azimuth.text()
        if source_azimuth.replace('.','',1).isdigit():
                source_azimuth = float(source_azimuth)
        else:
            msg = QtWidgets.QMessageBox()
            msg.setIcon(QtWidgets.QMessageBox.Critical)
            msg.setText("Error")
            msg.setInformativeText('azimuth of the source lines is not a number')
            msg.setWindowTitle("Error")
            msg.exec_()

        # read and check the source length
        source_length = self.dialog.source_length.text()
        if source_length.replace('.','',1).isdigit():
                source_length = float(source_length)
        else:
            msg = QtWidgets.QMessageBox()
            msg.setIcon(QtWidgets.QMessageBox.Critical)
            msg.setText("Error")
            msg.setInformativeText('length of the source lines is not a number')
            msg.setWindowTitle("Error")
            msg.exec_()

        # read and check the source width
        source_width = self.dialog.source_width.text()
        if source_width.replace('.','',1).isdigit():
                source_width = float(source_width)
        else:
            msg = QtWidgets.QMessageBox()
            msg.setIcon(QtWidgets.QMessageBox.Critical)
            msg.setText("Error")
            msg.setInformativeText('width of the source lines is not a number')
            msg.setWindowTitle("Error")
            msg.exec_()

        # read and check the orientation of the source lines
        source_right = self.dialog.source_right.isChecked()

        # read and check the source line spacing
        source_line_spacing = self.dialog.source_line_spacing.text()
        if source_line_spacing.replace('.','',1).isdigit():
                source_line_spacing = float(source_line_spacing)
        else:
            msg = QtWidgets.QMessageBox()
            msg.setIcon(QtWidgets.QMessageBox.Critical)
            msg.setText("Error")
            msg.setInformativeText('line spacing for the source lines is not a number')
            msg.setWindowTitle("Error")
            msg.exec_()

        # read and check the source point spacing
        source_point_spacing = self.dialog.source_point_spacing.text()
        if source_point_spacing.replace('.','',1).isdigit():
                source_point_spacing = float(source_point_spacing)
        else:
            msg = QtWidgets.QMessageBox()
            msg.setIcon(QtWidgets.QMessageBox.Critical)
            msg.setText("Error")
            msg.setInformativeText('point spacing for the source lines is not a number')
            msg.setWindowTitle("Error")
            msg.exec_()  


    def trim(self): 
        global epsg, origin_x, origin_y, source, source_length, source_width, source_line_spacing, source_point_spacing
        
        # trim the length and width of the source lines to be exact multiple of line spacing and point spacing
        if source:
            source_length = int(source_length/source_point_spacing) * source_point_spacing
            self.dialog.source_length.setText(str(source_length))

            source_width = int(source_width/source_line_spacing) * source_line_spacing
            self.dialog.source_width.setText(str(source_width))


            
